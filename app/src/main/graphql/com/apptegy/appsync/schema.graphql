schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Mutation {
  createUserBadges(input: CreateUserBadgesInput!): UserBadges
  deleteUserBadges(input: DeleteUserBadgesInput!): UserBadges
  updateUserBadges(input: UpdateUserBadgesInput!): UserBadges
}

type Query {
  getUserBadges(client_id: String!, user_id: String!): UserBadges
  listUserBadges(filter: TableUserBadgesFilterInput, limit: Int, nextToken: String): UserBadgesConnection
}

type Subscription {
  onCreateUserBadges(badges: String, client_id: String, user_id: String): UserBadges @aws_subscribe(mutations : ["createUserBadges"])
  onDeleteUserBadges(badges: String, client_id: String, user_id: String): UserBadges @aws_subscribe(mutations : ["deleteUserBadges"])
  onUpdateUserBadges(client_id: String, user_id: String): UserBadges @aws_subscribe(mutations : ["updateUserBadges"])
}

type UserBadges {
  badges: AWSJSON
  client_id: String!
  user_id: String!
}

type UserBadgesConnection {
  items: [UserBadges]
  nextToken: String
}
input CreateUserBadgesInput {
  badges: AWSJSON
  client_id: String!
  user_id: String!
}
input DeleteUserBadgesInput {
  client_id: String!
  user_id: String!
}
input TableBooleanFilterInput {
  eq: Boolean
  ne: Boolean
}
input TableFloatFilterInput {
  between: [Float]
  contains: Float
  eq: Float
  ge: Float
  gt: Float
  le: Float
  lt: Float
  ne: Float
  notContains: Float
}
input TableIDFilterInput {
  beginsWith: ID
  between: [ID]
  contains: ID
  eq: ID
  ge: ID
  gt: ID
  le: ID
  lt: ID
  ne: ID
  notContains: ID
}

input TableIntFilterInput {
  between: [Int]
  contains: Int
  eq: Int
  ge: Int
  gt: Int
  le: Int
  lt: Int
  ne: Int
  notContains: Int
}

input TableStringFilterInput {
  beginsWith: String
  between: [String]
  contains: String
  eq: String
  ge: String
  gt: String
  le: String
  lt: String
  ne: String
  notContains: String
}

input TableUserBadgesFilterInput {
  badges: TableStringFilterInput
  client_id: TableStringFilterInput
  user_id: TableStringFilterInput
}

input UpdateUserBadgesInput {
  badges: AWSJSON
  client_id: String!
  user_id: String!
}